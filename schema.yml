openapi: 3.0.3
info:
  title: Your Project API
  version: 1.0.0
  description: Your project description
paths:
  /api/categories/:
    get:
      operationId: categories_list
      description: |-
        Allowed methods: get, head, options.

        Routes:
        GET /categories
        GET /categories/1
      tags:
      - categories
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{id}/:
    get:
      operationId: categories_retrieve
      description: |-
        Allowed methods: get, head, options.

        Routes:
        GET /categories
        GET /categories/1
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - categories
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/change-password/:
    put:
      operationId: change_password_update
      description: |-
        An endpoint for changing password.
        Data has to contain `old_password`, `password`, `password2`.
        After changing the password new authentication token is created and send in response.

        Routes:
        PUT/PATCH /change-password/
      tags:
      - change-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
    patch:
      operationId: change_password_partial_update
      description: |-
        An endpoint for changing password.
        Data has to contain `old_password`, `password`, `password2`.
        After changing the password new authentication token is created and send in response.

        Routes:
        PUT/PATCH /change-password/
      tags:
      - change-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChangePassword'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /api/password-reset/:
    post:
      operationId: password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - password-reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/password-reset/confirm/:
    post:
      operationId: password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - password-reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/password-reset/validate_token/:
    post:
      operationId: password_reset_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
      - password-reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Token'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Token'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/posts/:
    get:
      operationId: posts_list
      description: |-
        A class based view with custom create and patch methods.
        Allowed http methods: get, post, put, patch, delete, head, options.
        User can update and delete only posts, that belong to them.

        Routes:
        GET /posts
        GET /posts/?user=1
        GET /posts/?thread=1
        GET /posts/?search=xyz
        GET /posts/?ordering=created
        GET /posts/1
        POST /posts
        PUT/PATCH /posts/1
        DELETE /posts/1

        Ordering is possible by 'created' field. Default ordering is from the oldest posts.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - posts
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
    post:
      operationId: posts_create
      description: Custom create method automatically saves authenticated user in
        user field.
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/posts/{id}/:
    get:
      operationId: posts_retrieve
      description: |-
        A class based view with custom create and patch methods.
        Allowed http methods: get, post, put, patch, delete, head, options.
        User can update and delete only posts, that belong to them.

        Routes:
        GET /posts
        GET /posts/?user=1
        GET /posts/?thread=1
        GET /posts/?search=xyz
        GET /posts/?ordering=created
        GET /posts/1
        POST /posts
        PUT/PATCH /posts/1
        DELETE /posts/1

        Ordering is possible by 'created' field. Default ordering is from the oldest posts.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: posts_update
      description: |-
        Custom update method allows to modify only content property.
        The purpose of this custom method is to prevent changing user and thread fields.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: posts_partial_update
      description: |-
        A class based view with custom create and patch methods.
        Allowed http methods: get, post, put, patch, delete, head, options.
        User can update and delete only posts, that belong to them.

        Routes:
        GET /posts
        GET /posts/?user=1
        GET /posts/?thread=1
        GET /posts/?search=xyz
        GET /posts/?ordering=created
        GET /posts/1
        POST /posts
        PUT/PATCH /posts/1
        DELETE /posts/1

        Ordering is possible by 'created' field. Default ordering is from the oldest posts.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: posts_destroy
      description: Custom delete method allows user to delete their own posts only.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/registration/:
    post:
      operationId: registration_create
      description: |-
        Creates a new user.
        Returns token, user id and username in the response.
        Response sets the authentication cookie.
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Registration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: ''
  /api/threads/:
    get:
      operationId: threads_list
      description: |-
        A class based view with custom create and patch methods.
        Allowed http methods: get, post, put, patch, head, options. Delete http method is not allowed.
        User can update only threads, that belong to them.

        Routes:
        GET /threads
        GET /threads/?category=1
        GET /threads/?search=xyz
        GET /threads/?ordering=created
        GET /threads/1
        POST /threads
        PUT/PATCH /threads/1

        Ordering is possible by 'created' or 'latest_post_time'. Default ordering is from the latest posts.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - threads
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedThreadList'
          description: ''
    post:
      operationId: threads_create
      description: |-
        Custom create method automatically saves authenticated user in user field.
        The method will save only "title", "subject", "user" and "category" properties.
        It makes impossible to save other properties ("closed", "sticky"), that are meant to be changed only by admin by admin panel.
      tags:
      - threads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Thread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Thread'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: ''
  /api/threads/{id}/:
    get:
      operationId: threads_retrieve
      description: |-
        A class based view with custom create and patch methods.
        Allowed http methods: get, post, put, patch, head, options. Delete http method is not allowed.
        User can update only threads, that belong to them.

        Routes:
        GET /threads
        GET /threads/?category=1
        GET /threads/?search=xyz
        GET /threads/?ordering=created
        GET /threads/1
        POST /threads
        PUT/PATCH /threads/1

        Ordering is possible by 'created' or 'latest_post_time'. Default ordering is from the latest posts.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this thread.
        required: true
      tags:
      - threads
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: ''
    put:
      operationId: threads_update
      description: |-
        Custom update method allowes to modify only title and subject properies.
        User can only update threads, that belong to them.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this thread.
        required: true
      tags:
      - threads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Thread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Thread'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: ''
    patch:
      operationId: threads_partial_update
      description: |-
        A class based view with custom create and patch methods.
        Allowed http methods: get, post, put, patch, head, options. Delete http method is not allowed.
        User can update only threads, that belong to them.

        Routes:
        GET /threads
        GET /threads/?category=1
        GET /threads/?search=xyz
        GET /threads/?ordering=created
        GET /threads/1
        POST /threads
        PUT/PATCH /threads/1

        Ordering is possible by 'created' or 'latest_post_time'. Default ordering is from the latest posts.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this thread.
        required: true
      tags:
      - threads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedThread'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: ''
  /api/token-auth/:
    post:
      operationId: token_auth_create
      description: |-
        Add user id and username to the response.
        Response sets the authentication cookie.
      tags:
      - token-auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      description: |-
        Allowed http methods: get, patch, put, head, options.
        Some user data are accessible only for profile owner and hidden from other users.
        User can update only their own profile data.

        Routes:
        GET /users/
        GET /users/?search=some_name
        GET /users/1/
        PATCH/PUT /users/1/

        Ordering is alphabetical.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserPublicList'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      description: Custom retrieve method use UserPrivateSerializer if the user object
        is requested by it's owner.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          description: ''
    put:
      operationId: users_update
      description: |-
        Custom update method allows to modify only selected fields.
        User is allowed to modify only their own profile.
        UserPrivateSerializer is used instead of default serializer.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPublic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPublic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPublic'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          description: ''
    patch:
      operationId: users_partial_update
      description: |-
        Allowed http methods: get, patch, put, head, options.
        Some user data are accessible only for profile owner and hidden from other users.
        User can update only their own profile data.

        Routes:
        GET /users/
        GET /users/?search=some_name
        GET /users/1/
        PATCH/PUT /users/1/

        Ordering is alphabetical.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserPublic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserPublic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserPublic'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
          minLength: 3
        description:
          type: string
          nullable: true
          maxLength: 500
        threads:
          type: integer
          readOnly: true
        posts:
          type: integer
          readOnly: true
      required:
      - id
      - name
      - posts
      - threads
    ChangePassword:
      type: object
      description: |-
        Serializer for changing the password.
        Checks if the `old_password` match with old user password.
        Checks if the new password meets security criteria.
        Checks if `password2` matches with `password`.
      properties:
        old_password:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - old_password
      - password
      - password2
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PaginatedPostList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
        previous:
          type: string
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    PaginatedThreadList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
        previous:
          type: string
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Thread'
    PaginatedUserPublicList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
        previous:
          type: string
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PatchedChangePassword:
      type: object
      description: |-
        Serializer for changing the password.
        Checks if the `old_password` match with old user password.
        Checks if the new password meets security criteria.
        Checks if `password2` matches with `password`.
      properties:
        old_password:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
    PatchedPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
          maxLength: 2000
        user:
          type: integer
        thread:
          type: integer
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
    PatchedThread:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
          minLength: 3
        subject:
          type: string
          minLength: 10
          maxLength: 2000
        user:
          type: integer
        category:
          type: integer
        sticky:
          type: boolean
        closed:
          type: boolean
        posts:
          type: integer
          readOnly: true
        latest_post_time:
          type: string
          format: date-time
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
    PatchedUserPublic:
      type: object
      description: Serialize user data that is meant to be visible to other users.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        date_joined:
          type: string
          format: date-time
        status:
          type: string
          nullable: true
          maxLength: 50
        description:
          type: string
          nullable: true
          maxLength: 1000
        avatar:
          type: string
          format: uri
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
          maxLength: 2000
        user:
          type: integer
        thread:
          type: integer
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created
      - id
      - thread
      - updated
      - user
    Registration:
      type: object
      description: Serializer for registering a new users.
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password2
      - username
    Thread:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
          minLength: 3
        subject:
          type: string
          minLength: 10
          maxLength: 2000
        user:
          type: integer
        category:
          type: integer
        sticky:
          type: boolean
        closed:
          type: boolean
        posts:
          type: integer
          readOnly: true
        latest_post_time:
          type: string
          format: date-time
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
      required:
      - category
      - created
      - id
      - latest_post_time
      - posts
      - subject
      - title
      - updated
      - user
    Token:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    UserPublic:
      type: object
      description: Serialize user data that is meant to be visible to other users.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        date_joined:
          type: string
          format: date-time
        status:
          type: string
          nullable: true
          maxLength: 50
        description:
          type: string
          nullable: true
          maxLength: 1000
        avatar:
          type: string
          format: uri
      required:
      - id
      - username
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
